import { NextResponse } from "next/server";
import connectDB from "@/lib/database";
import User from "@/models/User";
import crypto from "crypto";
import nodemailer from "nodemailer";

// C·∫•u h√¨nh transporter cho nodemailer
const createTransporter = () => {
  return nodemailer.createTransport({
    host: process.env.EMAIL_HOST,
    port: process.env.EMAIL_PORT,
    secure: false, // true cho port 465, false cho c√°c port kh√°c
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    },
  });
};

// T·∫°o email template
const createEmailTemplate = (resetUrl, userName) => {
  return `
    <!DOCTYPE html>
    <html lang="vi">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          line-height: 1.6;
          color: #333;
          max-width: 600px;
          margin: 0 auto;
          padding: 20px;
        }
        .header {
          background-color: #ec4899 !important;
          color: #ffffff !important;
          padding: 20px;
          text-align: center;
          border-radius: 8px 8px 0 0;
        }
        .content {
          background-color: #f8f9fa;
          padding: 30px;
          border-radius: 0 0 8px 8px;
        }
        .button {
          display: inline-block;
          background-color: #ec4899 !important;
          color: #ffffff !important;
          padding: 15px 30px;
          text-decoration: none !important;
          border-radius: 6px;
          margin: 20px 0;
          font-weight: bold !important;
          font-size: 16px;
          border: none;
          text-align: center;
        }
        .footer {
          text-align: center;
          margin-top: 30px;
          color: #666;
          font-size: 14px;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <h1>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h1>
      </div>
      <div class="content">
        <p>Xin ch√†o <strong>${userName}</strong>,</p>
        
        <p>B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa m√¨nh. Vui l√≤ng nh·∫•p v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p>
        
        <div style="text-align: center;">
          <a href="${resetUrl}" class="button">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
        </div>
        
        <p>Ho·∫∑c copy v√† d√°n link n√†y v√†o tr√¨nh duy·ªát:</p>
        <p style="word-break: break-all; background-color: #e9ecef; padding: 10px; border-radius: 4px;">
          ${resetUrl}
        </p>
        
        <p><strong>L∆∞u √Ω:</strong></p>
        <ul>
          <li>Link n√†y s·∫Ω h·∫øt h·∫°n sau 15 ph√∫t</li>
          <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y</li>
          <li>M·∫≠t kh·∫©u c·ªßa b·∫°n s·∫Ω kh√¥ng thay ƒë·ªïi cho ƒë·∫øn khi b·∫°n nh·∫•p v√†o link v√† t·∫°o m·∫≠t kh·∫©u m·ªõi</li>
        </ul>
      </div>
      
      <div class="footer">
        <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© E-Commerce</p>
        <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng tr·∫£ l·ªùi.</p>
      </div>
    </body>
    </html>
  `;
};

export async function POST(request) {
  try {
    console.log("üîç Starting forgot password request...");
    await connectDB();
    console.log("‚úÖ Database connected successfully");

    const { email } = await request.json();
    console.log("üìß Email received:", email);

    // Validation
    if (!email) {
      console.log("‚ùå No email provided");
      return NextResponse.json(
        { success: false, message: "Email l√† b·∫Øt bu·ªôc" },
        { status: 400 }
      );
    }

    // T√¨m user theo email
    console.log("üîç Searching for user with email:", email.toLowerCase());
    const user = await User.findOne({ email: email.toLowerCase() });
    if (!user) {
      console.log("‚ùå User not found");
      return NextResponse.json(
        { success: false, message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y" },
        { status: 404 }
      );
    }
    console.log("‚úÖ User found:", user.name);

    // T·∫°o reset token
    const resetToken = crypto.randomBytes(32).toString("hex");
    const resetTokenExpires = new Date(Date.now() + 15 * 60 * 1000); // 15 ph√∫t
    console.log("üîë Generated reset token");

    // L∆∞u reset token v√†o database
    user.resetPasswordToken = resetToken;
    user.resetPasswordExpires = resetTokenExpires;
    await user.save();
    console.log("üíæ Reset token saved to database");

    // T·∫°o reset URL
    const resetUrl = `${process.env.NEXT_PUBLIC_APP_URL}/reset-password?token=${resetToken}`;
    console.log("üîó Reset URL created:", resetUrl);

    // G·ª≠i email
    try {
      console.log("üìß Creating email transporter...");
      const transporter = createTransporter();

      const mailOptions = {
        from: process.env.EMAIL_FROM,
        to: user.email,
        subject: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - E-Commerce",
        html: createEmailTemplate(resetUrl, user.name),
      };

      console.log("üì§ Sending email to:", user.email);
      await transporter.sendMail(mailOptions);
      console.log("‚úÖ Email sent successfully");

      return NextResponse.json({
        success: true,
        message:
          "Email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ c·ªßa b·∫°n.",
      });
    } catch (emailError) {
      console.error("L·ªói g·ª≠i email:", emailError);

      // X√≥a reset token n·∫øu g·ª≠i email th·∫•t b·∫°i
      user.resetPasswordToken = null;
      user.resetPasswordExpires = null;
      await user.save();

      return NextResponse.json(
        { success: false, message: "L·ªói g·ª≠i email. Vui l√≤ng th·ª≠ l·∫°i sau." },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error("L·ªói forgot password:", error);
    return NextResponse.json(
      { success: false, message: "L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau." },
      { status: 500 }
    );
  }
}

"use client";

import { useState } from "react";

export default function AIAssistant({ product }) {
  const [isOpen, setIsOpen] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [message, setMessage] = useState("");
  const [messages, setMessages] = useState([
    {
      id: 1,
      type: "bot",
      content: `Xin ch√†o! T√¥i l√† M.O.B AI ASSISTANT. T√¥i chuy√™n t∆∞ v·∫•n v·ªÅ n·∫øn th∆°m v√† body mist. H√£y h·ªèi t√¥i v·ªÅ ${product.name} - t·ª´ h∆∞∆°ng th∆°m c√°ch s·ª≠ d·ª•ng ƒë·ªìn...`,
    },
  ]);

  const suggestedQuestions = [
    "S·∫£n ph·∫©m n√†y c√≥ nh·ªØng ∆∞u ƒëi·ªÉm g√¨?",
    "Gi√° c·∫£ nh∆∞ th·∫ø n√†o?",
    "C√≥ ph√π h·ª£p l√†m qu√† t·∫∑ng kh√¥ng?",
  ];

  const handleSendMessage = (e) => {
    e.preventDefault();
    if (!message.trim()) return;

    const newMessage = {
      id: messages.length + 1,
      type: "user",
      content: message,
    };

    setMessages([...messages, newMessage]);
    setMessage("");

    // Generate specific response based on question
    setTimeout(() => {
      const botResponse = {
        id: messages.length + 2,
        type: "bot",
        content: generateResponse(message, product),
      };
      setMessages((prev) => [...prev, botResponse]);
    }, 1000);
  };

  const generateResponse = (question, product) => {
    const lowerQuestion = question.toLowerCase();

    // Price related questions
    if (
      lowerQuestion.includes("gi√°") ||
      lowerQuestion.includes("price") ||
      lowerQuestion.includes("ti·ªÅn")
    ) {
      return `S·∫£n ph·∫©m ${
        product.name
      } c√≥ gi√° ${product.price?.toLocaleString()}‚Ç´. ƒê√¢y l√† m·ª©c gi√° h·ª£p l√Ω cho m·ªôt s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao nh∆∞ v·∫≠y. B·∫°n c√≥ th·ªÉ thanh to√°n b·∫±ng nhi·ªÅu ph∆∞∆°ng th·ª©c kh√°c nhau.`;
    }

    // Gift related questions
    if (
      lowerQuestion.includes("qu√†") ||
      lowerQuestion.includes("gift") ||
      lowerQuestion.includes("t·∫∑ng")
    ) {
      return `Ho√†n to√†n ph√π h·ª£p l√†m qu√† t·∫∑ng! ${product.name} ƒë∆∞·ª£c ƒë√≥ng g√≥i ƒë·∫πp m·∫Øt v√† c√≥ h∆∞∆°ng th∆°m sang tr·ªçng. ƒê√¢y l√† m√≥n qu√† √Ω nghƒ©a cho ng∆∞·ªùi th√¢n y√™u, ƒë·∫∑c bi·ªát ph√π h·ª£p cho c√°c d·ªãp ƒë·∫∑c bi·ªát.`;
    }

    // Advantages/benefits questions
    if (
      lowerQuestion.includes("∆∞u ƒëi·ªÉm") ||
      lowerQuestion.includes("l·ª£i √≠ch") ||
      lowerQuestion.includes("t·ªët") ||
      lowerQuestion.includes("benefit")
    ) {
      return `S·∫£n ph·∫©m ${product.name} c√≥ nhi·ªÅu ∆∞u ƒëi·ªÉm: h∆∞∆°ng th∆°m t·ª± nhi√™n, th√†nh ph·∫ßn an to√†n, thi·∫øt k·∫ø sang tr·ªçng v√† hi·ªáu qu·∫£ l√¢u d√†i. S·∫£n ph·∫©m ƒë∆∞·ª£c nhi·ªÅu kh√°ch h√†ng tin t∆∞·ªüng v√† ƒë√°nh gi√° cao.`;
    }

    // Usage questions
    if (
      lowerQuestion.includes("c√°ch d√πng") ||
      lowerQuestion.includes("s·ª≠ d·ª•ng") ||
      lowerQuestion.includes("usage")
    ) {
      return `C√°ch s·ª≠ d·ª•ng ${product.name} r·∫•t ƒë∆°n gi·∫£n: x·ªãt nh·∫π l√™n c·ªï tay ho·∫∑c c·ªï, sau ƒë√≥ thoa ƒë·ªÅu. Tr√°nh x·ªãt tr·ª±c ti·∫øp l√™n m·∫∑t. S·∫£n ph·∫©m c√≥ th·ªÉ s·ª≠ d·ª•ng h√†ng ng√†y ƒë·ªÉ t·∫°o h∆∞∆°ng th∆°m quy·∫øn r≈©.`;
    }

    // Ingredients questions
    if (
      lowerQuestion.includes("th√†nh ph·∫ßn") ||
      lowerQuestion.includes("ingredient") ||
      lowerQuestion.includes("nguy√™n li·ªáu")
    ) {
      return `${product.name} ƒë∆∞·ª£c l√†m t·ª´ c√°c th√†nh ph·∫ßn t·ª± nhi√™n v√† an to√†n. S·∫£n ph·∫©m kh√¥ng ch·ª©a c√°c ch·∫•t ƒë·ªôc h·∫°i v√† ph√π h·ª£p v·ªõi m·ªçi lo·∫°i da. Ch√∫ng t√¥i cam k·∫øt v·ªÅ ch·∫•t l∆∞·ª£ng v√† ƒë·ªô an to√†n c·ªßa s·∫£n ph·∫©m.`;
    }

    // Default response
    return `C·∫£m ∆°n b·∫°n ƒë√£ h·ªèi v·ªÅ ${product.name}! ƒê√¢y l√† m·ªôt s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao v·ªõi h∆∞∆°ng th∆°m tuy·ªát v·ªùi. B·∫°n c√≥ th·ªÉ h·ªèi th√™m v·ªÅ gi√° c·∫£, c√°ch s·ª≠ d·ª•ng, ho·∫∑c th√†nh ph·∫ßn c·ªßa s·∫£n ph·∫©m.`;
  };

  const handleSuggestedQuestion = (question) => {
    const newMessage = {
      id: messages.length + 1,
      type: "user",
      content: question,
    };

    setMessages([...messages, newMessage]);

    // Generate specific response based on question
    setTimeout(() => {
      const botResponse = {
        id: messages.length + 2,
        type: "bot",
        content: generateResponse(question, product),
      };
      setMessages((prev) => [...prev, botResponse]);
    }, 1000);
  };

  return (
    <>
      {/* Floating Button - only show when chat is closed */}
      {!isOpen && (
        <button
          onClick={() => setIsOpen(true)}
          className="fixed bottom-6 right-6 bg-gradient-to-r from-pink-500 to-purple-600 text-white p-4 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 z-40"
        >
          <div className="w-8 h-8 flex items-center justify-center">
            <span className="text-2xl">üéÅ</span>
          </div>
        </button>
      )}

      {/* Chat Modal */}
      {isOpen && (
        <div className="fixed bottom-6 right-6 w-full max-w-md h-[600px] flex flex-col shadow-2xl z-50">
          <div className="bg-white rounded-2xl w-full h-full flex flex-col">
            {/* Header */}
            <div className="bg-gradient-to-r from-pink-500 to-purple-600 text-white p-4 rounded-t-2xl">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center">
                    <span className="text-xl">üéÅ</span>
                  </div>
                  <div>
                    <h3 className="font-bold">M.O.B AI ASSISTANT</h3>
                    <p className="text-xs text-white/80">Tr·ª±c tuy·∫øn</p>
                  </div>
                </div>
                <div className="flex space-x-2">
                  <button
                    onClick={() => setIsMinimized(!isMinimized)}
                    className="text-white/80 hover:text-white transition-colors"
                  >
                    <svg
                      className="w-5 h-5"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d={isMinimized ? "M4 8h16M4 16h16" : "M20 12H4"}
                      />
                    </svg>
                  </button>
                  <button
                    onClick={() => setIsOpen(false)}
                    className="text-white/80 hover:text-white transition-colors"
                  >
                    <svg
                      className="w-6 h-6"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M6 18L18 6M6 6l12 12"
                      />
                    </svg>
                  </button>
                </div>
              </div>
            </div>

            {/* Chat Content - only show when not minimized */}
            {!isMinimized && (
              <>
                {/* Messages */}
                <div className="flex-1 overflow-y-auto p-4 space-y-4">
                  {messages.map((msg) => (
                    <div
                      key={msg.id}
                      className={`flex ${
                        msg.type === "user" ? "justify-end" : "justify-start"
                      }`}
                    >
                      <div
                        className={`max-w-[80%] p-3 rounded-lg ${
                          msg.type === "user"
                            ? "bg-pink-500 text-white"
                            : "bg-gray-100 text-gray-800"
                        }`}
                      >
                        <p className="text-sm">{msg.content}</p>
                      </div>
                    </div>
                  ))}
                </div>

                {/* Suggested Questions */}
                <div className="px-4 pb-2">
                  <div className="flex flex-wrap gap-2">
                    {suggestedQuestions.map((question, index) => (
                      <button
                        key={index}
                        onClick={() => handleSuggestedQuestion(question)}
                        className="text-xs bg-gray-100 hover:bg-gray-200 text-gray-700 px-3 py-1 rounded-full transition-colors"
                      >
                        {question}
                      </button>
                    ))}
                  </div>
                </div>

                {/* Input */}
                <form onSubmit={handleSendMessage} className="p-4 border-t">
                  <div className="flex space-x-2">
                    <input
                      type="text"
                      value={message}
                      onChange={(e) => setMessage(e.target.value)}
                      placeholder="H·ªèi v·ªÅ s·∫£n ph·∫©m n√†y..."
                      className="duration-200 flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-1 focus:ring-pink-500 focus:border-pink-500 outline-none text-sm"
                    />
                    <button
                      type="submit"
                      className="bg-pink-500 hover:bg-pink-600 text-white p-2 rounded-lg transition-colors"
                    >
                      <svg
                        className="w-5 h-5"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"
                        />
                      </svg>
                    </button>
                  </div>
                </form>
              </>
            )}
          </div>
        </div>
      )}
    </>
  );
}
